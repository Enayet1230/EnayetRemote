function SpeechSynthesisObject() {
    var _support = false;
    var _voice = null;
    var _rate = 1;
    var _lang = 'en-US';
    var _voices = [];

    if ('speechSynthesis' in window) {
        _support = true;
    }

    if (_support) {
        if ('onvoiceschanged' in speechSynthesis) {
            speechSynthesis.onvoiceschanged = getVoices;
        } else {
            populateVoices();
        }
    }

    function getVoices() {
        _voices = speechSynthesis.getVoices();

        var ready = new Event('speechsynthesisready');
        window.dispatchEvent(ready);
    }

    function populateVoices() {
        // wait first
        var watch = setTimeout(function () {
            _voices = speechSynthesis.getVoices();

            if (_voices.length === 0 && isiPad()) {
                // use hard-coded list because speechSynthesis.getVoices() didn't work
                _voices = _iOSvoices;
            }

            clearTimeout(watch);

            var ready = new Event('speechsynthesisready');
            window.dispatchEvent(ready);
        }, 100);
    }

    function isiPad() {
        return (navigator.userAgent.match(/iPad/i) !== null);
    }

    var _iOSvoices = [
{ name: "pt-BR", voiceURI: "pt-BR", lang: "pt-BR", localService: true, "default": true },
{ name: "fr-CA", voiceURI: "fr-CA", lang: "fr-CA", localService: true, "default": true },
{ name: "sk-SK", voiceURI: "sk-SK", lang: "sk-SK", localService: true, "default": true },
{ name: "th-TH", voiceURI: "th-TH", lang: "th-TH", localService: true, "default": true },
{ name: "ro-RO", voiceURI: "ro-RO", lang: "ro-RO", localService: true, "default": true },
{ name: "no-NO", voiceURI: "no-NO", lang: "no-NO", localService: true, "default": true },
{ name: "fi-FI", voiceURI: "fi-FI", lang: "fi-FI", localService: true, "default": true },
{ name: "pl-PL", voiceURI: "pl-PL", lang: "pl-PL", localService: true, "default": true },
{ name: "de-DE", voiceURI: "de-DE", lang: "de-DE", localService: true, "default": true },
{ name: "nl-NL", voiceURI: "nl-NL", lang: "nl-NL", localService: true, "default": true },
{ name: "id-ID", voiceURI: "id-ID", lang: "id-ID", localService: true, "default": true },
{ name: "tr-TR", voiceURI: "tr-TR", lang: "tr-TR", localService: true, "default": true },
{ name: "it-IT", voiceURI: "it-IT", lang: "it-IT", localService: true, "default": true },
{ name: "pt-PT", voiceURI: "pt-PT", lang: "pt-PT", localService: true, "default": true },
{ name: "fr-FR", voiceURI: "fr-FR", lang: "fr-FR", localService: true, "default": true },
{ name: "ru-RU", voiceURI: "ru-RU", lang: "ru-RU", localService: true, "default": true },
{ name: "es-MX", voiceURI: "es-MX", lang: "es-MX", localService: true, "default": true },
{ name: "zh-HK", voiceURI: "zh-HK", lang: "zh-HK", localService: true, "default": true },
{ name: "sv-SE", voiceURI: "sv-SE", lang: "sv-SE", localService: true, "default": true },
{ name: "hu-HU", voiceURI: "hu-HU", lang: "hu-HU", localService: true, "default": true },
{ name: "zh-TW", voiceURI: "zh-TW", lang: "zh-TW", localService: true, "default": true },
{ name: "es-ES", voiceURI: "es-ES", lang: "es-ES", localService: true, "default": true },
{ name: "zh-CN", voiceURI: "zh-CN", lang: "zh-CN", localService: true, "default": true },
{ name: "nl-BE", voiceURI: "nl-BE", lang: "nl-BE", localService: true, "default": true },
{ name: "en-GB", voiceURI: "en-GB", lang: "en-GB", localService: true, "default": true },
{ name: "ar-SA", voiceURI: "ar-SA", lang: "ar-SA", localService: true, "default": true },
{ name: "ko-KR", voiceURI: "ko-KR", lang: "ko-KR", localService: true, "default": true },
{ name: "cs-CZ", voiceURI: "cs-CZ", lang: "cs-CZ", localService: true, "default": true },
{ name: "en-ZA", voiceURI: "en-ZA", lang: "en-ZA", localService: true, "default": true },
{ name: "en-AU", voiceURI: "en-AU", lang: "en-AU", localService: true, "default": true },
{ name: "da-DK", voiceURI: "da-DK", lang: "da-DK", localService: true, "default": true },
{ name: "en-US", voiceURI: "en-US", lang: "en-US", localService: true, "default": true },
{ name: "en-IE", voiceURI: "en-IE", lang: "en-IE", localService: true, "default": true },
{ name: "he-IL", voiceURI: "he-IL", lang: "he-IL", localService: true, "default": true },
{ name: "hi-IN", voiceURI: "hi-IN", lang: "hi-IN", localService: true, "default": true },
{ name: "el-GR", voiceURI: "el-GR", lang: "el-GR", localService: true, "default": true },
{ name: "ja-JP", voiceURI: "ja-JP", lang: "ja-JP", localService: true, "default": true }
    ];

    this.IsSupported = function () {
        return _support;
    };

    this.GetVoices = function () {
        var voices = '';

        voices = _voices.map(
function (v) {
    return v.name;
}
).join(',');

        return voices;
    };

    this.GetDefaultVoice = function () {
        var voice = '';

        var defaults = _voices.filter(function (v) {
            return v['default'];
        });

        if (defaults.length > 1) {

            // if more than one default, find the one that matches the current language

            _voices.some(function (v) {
                if (v.lang === _lang) {
                    voice = v.name;
                    return true;
                }
            });

            // if none match language, use first
            if (voice === '') {
                voice = defaults[0].name;
            }

        } else if (defaults.length === 1) {
            voice = defaults[0].name;
        }

        return voice;
    };

    this.GetCurrentVoice = function () {
        var voice = '';
        if (_voice) {
            voice = _voice.name
        }
        return voice;
    };

    this.SetVoice = function (voices) {
        voices.split(/\s*,\s*/).some(function (v) {
            return _voices.some(function (voice) {
                if (v === voice.name) {
                    _voice = voice;
                    return true;
                }
            });
        });
    };

    this.SetSpeed = function (rate) {
        // scale from [-10 to 10] to [.3 to 3]
        // using formula from spreadsheet: 10th root of 3 to the nth power
        _rate = Math.pow(Math.pow(3, 1 / 10), parseFloat(rate));
    };

    this.SetLanguage = function (lang) {
        _lang = lang;
    };

    this.StartSpeakingText = function (text) {
        say = new SpeechSynthesisUtterance();
        say['default'] = false;
        say.text = text;
        say.rate = _rate;
        say.lang = _lang;
        say.voice = _voice;

        speechSynthesis.speak(say);
    };

    this.IsSpeaking = function () {
        return speechSynthesis.speaking;
    }

    this.StopSpeaking = function () {
        speechSynthesis.cancel();
    };

}

var SpeechSynthesis = new SpeechSynthesisObject();